package demo;

public class CurrentThread {
	public static void main(String[] args) {
		Thread t = Thread.currentThread();
		System.out.println("Current thread: " + t);
		
		t.setName("My Thread");
		System.out.println("After name change:" + t);
		try {
			for(int n = 5; n > 0; n--) {
				System.out.println(n);
				Thread.sleep(1000);
			}
		}catch (InterruptedException e) {
			System.out.println("Main thread interrupted");
		}
	}
}

//在本程序中，当前线程（自然是主线程）的引用通过调用currentThread()获得，该引用保存在局部变量t中。
//然后，程序显示了线程的信息。接着程序调用setName()改变线程的内部名称。线程信息又被显示。
//然后，一个循环数从5开始递减，每数一次暂停一秒。暂停是由sleep()方法来完成的。
//Sleep()语句明确规定延迟时间是1毫秒。注意循环外的try/catch块。


//注意t作为语句println()中参数运用时输出的产生。该显示顺序：线程名称，优先级以及组的名称。默认情况下，主线程的名称是main。它的优先级是5，这也是默认值，main也是所属线程组的名称。一个线程组（thread group）是一种将线程作为一个整体集合的状态控制的数据结构。这个过程由专有的运行时环境来处理，在此就不赘述了。线程名改变后，t又被输出。这次，显示了新的线程名。
//
//让我们更仔细的研究程序中Thread类定义的方法。sleep()方法按照毫秒级的时间指示使线程从被调用到挂起。它的通常形式如下：
//    static void sleep(long milliseconds) throws InterruptedException
//挂起的时间被明确定义为毫秒。该方法可能引发InterruptedException异常。
//
//sleep()方法还有第二种形式，显示如下，该方法允许你指定时间是以毫秒还是以纳秒为周期。
//    static void sleep(long milliseconds, int nanoseconds) throws InterruptedException
//
//第二种形式仅当允许以纳秒为时间周期时可用。如上述程序所示，你可以用setName()设置线程名称，用getName()来获得线程名称（该过程在程序中没有体现）。这些方法都是Thread 类的成员，声明如下：
//    final void setName(String threadName)
//    final String getName( )
//这里，threadName 特指线程名称。