package demo;
//Object 类位于 java.lang 包中，是所有 Java 类的祖先，Java 中的每个类都由它扩展而来

//---------------------------equals() 方法-------------------------
//	用来检测一个对象是否等价于另外一个对象，		语法为：public boolean equals(Object obj)
//		obj1.equals(obj2);

//	注意：
//		equals()方法只能比较引用类型，“==”可以比较引用类型及基本类型。
//		当用 equals() 方法进行比较时，对类 File、String、Date 及包装类来说，是比较类型及内容而不考虑引用的是否是同一个实例。
//		用“==”进行比较时，符号两边的数据类型必须一致（可自动转换的数据类型除外），否则编译出错，而用 equals 方法比较的两个数据只要都是引用类型即可。

//----------------------------hashCode() 方法----------------------------
//	散列码(hashCode)是按照一定的算法由对象得到的一个数值，散列码没有规律。
//		如果 x 和 y 是不同的对象，x.hashCode() 与 y.hashCode() 基本上不会相同。
//	hashCode() 方法主要用来在集合中实现快速查找等操作，也可以用于对象的比较。

//在 Java 中，对 hashCode 的规定如下：
//	在同一个应用程序执行期间，对同一个对象调用 hashCode()，必须返回相同的整数结果――前提是 equals() 所比较的信息都不曾被改动过。至于同一个应用程序在不同执行期所得的调用结果，无需一致。
//	如果两个对象被 equals() 方法视为相等，那么对这两个对象调用 hashCode() 必须获得相同的整数结果。
//	如果两个对象被 equals() 方法视为不相等，那么对这两个对象调用 hashCode() 不必产生不同的整数结果。然而程序员应该意识到，对不同对象产生不同的整数结果，有可能提升hashTable的效率。

//简单地说：如果两个对象相同，那么它们的 hashCode 值一定要相同；如果两个对象的 hashCode 值相同，它们并不一定相同。在 Java 规范里面规定，一般是覆盖 equals() 方法应该连带覆盖 hashCode() 方法。

//------------------------------toString() 方法------------------------------
//	是对象的字符串表现形式，语法为：public String toString()
//		返回值是 String 类型，用于描述当前对象的有关信息。Object 类中实现的 toString() 方法是返回当前对象的类型和内存地址信息，
//		但在一些子类（如 String、Date 等）中进行了 重写，也可以根据需要在用户自定义类型中重写 toString() 方法，以返回更适用的信息。


public class ObjectClass {
	
}
